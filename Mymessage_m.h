//
// Generated file, do not edit! Created by nedtool 5.0 from Mymessage.msg.
//

#ifndef __MYMESSAGE_M_H
#define __MYMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>Mymessage.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * message InitAck
 * {
 *     simtime_t ack;
 * }
 * </pre>
 */
class InitAck : public ::omnetpp::cMessage
{
  protected:
    ::omnetpp::simtime_t ack;

  private:
    void copy(const InitAck& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const InitAck&);

  public:
    InitAck(const char *name=nullptr, int kind=0);
    InitAck(const InitAck& other);
    virtual ~InitAck();
    InitAck& operator=(const InitAck& other);
    virtual InitAck *dup() const {return new InitAck(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual ::omnetpp::simtime_t getAck() const;
    virtual void setAck(::omnetpp::simtime_t ack);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const InitAck& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, InitAck& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Mymessage.msg:22</tt> by nedtool.
 * <pre>
 * message datapackage
 * {
 *     int datatype;//1 is beacon ,2 is data ,3 is dataack,4 is beaconack
 *     unsigned int nodeid;
 *     simtime_t delay;
 * }
 * </pre>
 */
class datapackage : public ::omnetpp::cMessage
{
  protected:
    int datatype;
    unsigned int nodeid;
    ::omnetpp::simtime_t delay;

  private:
    void copy(const datapackage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const datapackage&);

  public:
    datapackage(const char *name=nullptr, int kind=0);
    datapackage(const datapackage& other);
    virtual ~datapackage();
    datapackage& operator=(const datapackage& other);
    virtual datapackage *dup() const {return new datapackage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getDatatype() const;
    virtual void setDatatype(int datatype);
    virtual unsigned int getNodeid() const;
    virtual void setNodeid(unsigned int nodeid);
    virtual ::omnetpp::simtime_t getDelay() const;
    virtual void setDelay(::omnetpp::simtime_t delay);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const datapackage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, datapackage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MYMESSAGE_M_H

